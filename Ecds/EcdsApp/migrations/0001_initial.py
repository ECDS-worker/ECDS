# Generated by Django 2.1.2 on 2018-12-04 14:24

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplyInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_nm', models.CharField(default='', help_text='联系人名字', max_length=16, null=True)),
                ('bank_num', models.CharField(help_text='行号', max_length=32)),
                ('production_ccpc', models.CharField(help_text='生产CCPC', max_length=32)),
                ('test_num', models.CharField(help_text='测试环境接入点号', max_length=48)),
                ('phone', models.CharField(blank=True, default='', help_text='手机号码', max_length=16, null=True)),
                ('email', models.EmailField(blank=True, default='', help_text='邮箱', max_length=254, null=True)),
                ('soft_nm', models.CharField(default='', help_text='内部软件名称', max_length=16, null=True)),
                ('soft_type', models.CharField(default='', help_text='内部系统软件版本', max_length=32, null=True)),
                ('mid_message', models.CharField(choices=[('MQ', 'MQ'), ('TLQ', 'TLQ')], default='MQ', help_text='消息中间件类型', max_length=32)),
                ('mid_apply', models.CharField(choices=[('MQ', 'MQ'), ('TLQ', 'TLQ')], default='MQ', help_text='应用件类型', max_length=32)),
                ('pro_version', models.CharField(default='', help_text='前置机MBFE操作系统及版本', max_length=16, null=True)),
                ('pro_system', models.CharField(default='', help_text='前置机操作系统', max_length=16, null=True)),
                ('start_time', models.DateTimeField(auto_now=True, help_text='开始时间', null=True)),
                ('end_time', models.DateTimeField(auto_now=True, help_text='结束时间', null=True)),
                ('first_access', models.IntegerField(blank=True, default=1, help_text='是否首次接入', null=True)),
                ('access_ty', models.IntegerField(choices=[(0, '直连'), (1, '客户端')], default=0, help_text='接入类型')),
                ('net_ty', models.IntegerField(blank=True, choices=[(0, 'pc动态接入'), (1, '路由器防火墙')], default=0, help_text='网络接入方式', null=True)),
                ('access_obj', models.TextField(default='', help_text='接入目的')),
                ('check_state', models.IntegerField(blank=True, choices=[(0, '等待审核'), (1, '审核通过'), (2, '驳回')], default=0, help_text='审核状态', null=True)),
                ('check_nm', models.CharField(help_text='审核人', max_length=20)),
                ('acc_month', models.CharField(default='', help_text='加入月份', max_length=20)),
                ('vpn', models.CharField(default='', help_text='参与者VPN', max_length=64)),
            ],
            options={
                'verbose_name': '机构申请信息表',
                'verbose_name_plural': '机构申请信息表',
                'db_table': 'ApplyInfo',
            },
        ),
        migrations.CreateModel(
            name='Commentuser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='姓名', max_length=15, null=True)),
                ('user_pw', models.CharField(max_length=64, null=True, verbose_name='用户密码')),
                ('phone', models.CharField(default='', help_text='手机号码', max_length=16, null=True)),
                ('email', models.EmailField(blank=True, default='', help_text='邮箱', max_length=254, null=True)),
                ('mk_time', models.DateField(auto_now_add=True, help_text='创建日期', null=True)),
                ('last_login', models.DateField(auto_now=True, help_text='最后登陆时间', null=True)),
                ('activate', models.IntegerField(default=0, help_text='用户状态')),
                ('Jurisdiction', models.CharField(max_length=32, null=True, verbose_name='权限字段')),
                ('role', models.IntegerField(choices=[(0, '访问者'), (1, '录入员'), (2, '复核员'), (3, '发布管理员'), (4, '应用录入员'), (5, '应用管理员')], default=0, verbose_name='角色信息')),
            ],
            options={
                'verbose_name': '客户信息表',
                'verbose_name_plural': '客户信息表',
                'db_table': 'Commentuser',
            },
        ),
        migrations.CreateModel(
            name='ContactsInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='联系人姓名', max_length=16)),
                ('role', models.CharField(choices=[('系统接口人', '系统接口人'), ('网络接口人', '网络接口人'), ('业务人员', '业务人员'), ('技术人员', '技术人员')], default='技术人员', help_text='角色', max_length=8)),
                ('phone', models.CharField(help_text='联系方式', max_length=16)),
                ('email', models.CharField(help_text='邮箱', max_length=16)),
                ('priority', models.IntegerField(blank=True, default=9, help_text='优先级', null=True)),
            ],
            options={
                'verbose_name': '联系人信息表',
                'verbose_name_plural': '联系人信息表',
                'db_table': 'ContactsInfo',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='Forn_Pro',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ins_name', models.CharField(default='', help_text='机构名称', max_length=64)),
                ('bank_num', models.CharField(default='', help_text='支付系统行号', max_length=64)),
                ('mid_type', models.CharField(default='', help_text='中间件类型', max_length=64)),
                ('port', models.CharField(default='', help_text='队列消息管理器', max_length=64)),
                ('join_num', models.CharField(default='', help_text='接入点号', max_length=64)),
                ('pro_version', models.CharField(help_text='前置机版本', max_length=128, null=True)),
                ('pro_system', models.CharField(help_text='前置机操作系统', max_length=128, null=True)),
            ],
            options={
                'verbose_name': '前置机信息表',
                'verbose_name_plural': '前置机信息表',
                'db_table': 'Forn_Pro',
            },
        ),
        migrations.CreateModel(
            name='Insinfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ins_nm', models.CharField(help_text='机构名称', max_length=64)),
                ('ins_cd', models.CharField(help_text='机构号', max_length=16)),
                ('ins_tp', models.CharField(default='', help_text='机构类型', max_length=4)),
                ('ins_st', models.IntegerField(choices=[(0, '禁用'), (1, '启用')], default=0, help_text='机构状态')),
                ('ins_location', models.CharField(default='', help_text='机构所在地', max_length=16, null=True)),
                ('ins_sysytem', models.CharField(default='', help_text='机构所属系统', max_length=16, null=True)),
                ('access_port', models.CharField(default='', help_text='接入点号', max_length=16, null=True)),
                ('port', models.CharField(default='', help_text='端口', max_length=8, null=True)),
                ('mid', models.CharField(choices=[('MQ', 'MQ'), ('TLQ', 'TLQ')], default='MQ', help_text='中间件类型', max_length=32)),
            ],
            options={
                'verbose_name': '客户信息表',
                'verbose_name_plural': '客户信息表',
                'db_table': 'insinfo',
            },
        ),
        migrations.CreateModel(
            name='JoinTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_ccpc', models.CharField(help_text='测试CCPC', max_length=48, null=True)),
                ('bank_num', models.CharField(help_text='测试机构名称', max_length=32, null=True)),
                ('test_num', models.CharField(help_text='测试环境接入点号', max_length=48, null=True)),
                ('production_env', models.CharField(default='', help_text='生产环节接入点号', max_length=48, null=True)),
                ('production_ccpc', models.CharField(default='', help_text='生产CCPC', max_length=32, null=True)),
                ('mid_name', models.IntegerField(choices=[('MQ', 'MQ'), ('TLQ', 'TLQ')], default='', help_text='中间件类型', null=True)),
                ('mid_type', models.CharField(default='', help_text='中间件版本', max_length=32)),
                ('apply_month', models.CharField(help_text='申请月份', max_length=48, null=True)),
                ('support_name', models.CharField(help_text='ECDS支持人员信息', max_length=16, null=True)),
                ('progress_text', models.TextField()),
                ('forninfo', models.ForeignKey(help_text='前置机信息', on_delete=django.db.models.deletion.CASCADE, to='EcdsApp.Forn_Pro')),
            ],
            options={
                'verbose_name': '接入者测试与信息登记表',
                'verbose_name_plural': '接入者测试与信息登记表',
                'db_table': 'JoinTest',
            },
        ),
        migrations.CreateModel(
            name='LogInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='用户名', max_length=16, null=True)),
                ('ins', models.CharField(help_text='所属机构名称', max_length=32, null=True)),
                ('operation', models.TextField(default='', help_text='操作内容', null=True)),
                ('nm_id', models.CharField(help_text='用户ID', max_length=20)),
            ],
            options={
                'verbose_name': '操作日志表',
                'verbose_name_plural': '操作日志表',
                'db_table': 'LogInfo',
            },
        ),
        migrations.CreateModel(
            name='LoginRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(help_text='用户id', max_length=20)),
                ('user_name', models.CharField(help_text='用户名', max_length=20)),
                ('user_ip', models.CharField(help_text='用户IP', max_length=32)),
                ('bank_name', models.CharField(help_text='行名', max_length=32)),
                ('bank_num', models.CharField(help_text='行号', max_length=32)),
                ('login_time', models.DateTimeField(help_text='登陆时间')),
                ('empty', models.CharField(help_text='预留字段', max_length=20, null=True)),
            ],
            options={
                'verbose_name': '登陆日志表',
                'verbose_name_plural': '登陆日志表',
                'db_table': 'LoginRecord',
            },
        ),
        migrations.CreateModel(
            name='NetInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ins_name', models.CharField(help_text='测试机构名称', max_length=20, null=True)),
                ('net_ty', models.IntegerField(blank=True, choices=[(0, 'pc动态接入'), (1, '路由器防火墙')], default=0, help_text='vpn网络接入方式', null=True)),
                ('IP_R2C1', models.CharField(help_text='参与者 VPN接入设备公网地址', max_length=32, null=True)),
                ('system_name', models.CharField(help_text='接入业务系统名称', max_length=32, null=True)),
                ('pro_num', models.CharField(help_text='业务前置机数量', max_length=32, null=True)),
                ('ip', models.CharField(help_text='参与者外联通信IP地址', max_length=32, null=True)),
                ('laboratory_ip', models.CharField(help_text='VPN接入实验室测试环境设备公网地址', max_length=32, null=True)),
                ('server_ip', models.CharField(help_text='系统接入测试实验室服务器外部通信地址段', max_length=32, null=True)),
                ('pro_EquiInfo', models.CharField(help_text='参与者VPN接入设备信息（品牌、型号）', max_length=48, null=True)),
            ],
            options={
                'verbose_name': '前置机信息表',
                'verbose_name_plural': '前置机信息表',
                'db_table': 'NetInfo',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notice_nm', models.CharField(default='', help_text='公告名称', max_length=128, null=True)),
                ('notice_cont', models.TextField(default='', help_text='公告内容', max_length=256, null=True)),
                ('publisher', models.CharField(default='', help_text='发布人', max_length=16, null=True)),
                ('activate', models.IntegerField(choices=[(0, '禁用'), (1, '启用')], default=0, help_text='活跃状态')),
                ('start_time', models.DateTimeField(auto_now=True, help_text='创建时间', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='失效时间', null=True)),
                ('priority', models.IntegerField(blank=True, default=9, help_text='优先级', null=True)),
            ],
            options={
                'verbose_name': '公告表',
                'verbose_name_plural': '公告表',
                'db_table': 'Notice',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='TecDocuments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='', help_text='上传人', max_length=16, null=True)),
                ('file_url', models.CharField(help_text='存储路径', max_length=512)),
                ('filename', models.CharField(help_text='文件名称', max_length=32)),
                ('up_time', models.DateTimeField(auto_now=True, help_text='上传时间')),
                ('activate', models.IntegerField(choices=[(0, '禁用'), (1, '启用')], default=0, help_text='活跃状态')),
                ('end_time', models.DateTimeField(auto_now_add=True, help_text='失效时间')),
                ('priority', models.IntegerField(blank=True, default=9, help_text='优先级', null=True)),
            ],
            options={
                'verbose_name': '技术文件',
                'verbose_name_plural': '技术文件',
                'db_table': 'TecDocuments',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='TimeMax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='', help_text='发布用户名', max_length=16, null=True)),
                ('start_time', models.DateField(help_text='当月工作日开始时间', null=True)),
                ('end_time', models.DateField(help_text='当月工作日结束时间', null=True)),
                ('max_acc', models.IntegerField(blank=True, help_text='当月最大接入数', null=True)),
                ('author_time', models.DateTimeField(auto_now_add=True, help_text='发布时间', null=True)),
                ('empty', models.CharField(help_text='预留字段', max_length=20, null=True)),
            ],
            options={
                'verbose_name': '限制表',
                'verbose_name_plural': '限制表',
                'db_table': 'TimeMax',
            },
        ),
        migrations.CreateModel(
            name='UserForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='', help_text='用户名', max_length=16, null=True)),
                ('ins_nm', models.CharField(default='', help_text='所属机构名称', max_length=64, null=True)),
                ('file_url', models.CharField(help_text='存储路径', max_length=128)),
                ('filename', models.CharField(help_text='文件名称', max_length=32)),
                ('up_time', models.DateTimeField(auto_now=True, help_text='上传时间')),
                ('bank_num', models.CharField(help_text='行号', max_length=36)),
                ('empty', models.CharField(help_text='预留字段', max_length=20)),
            ],
            options={
                'verbose_name': '上传信息表',
                'verbose_name_plural': '上传信息表',
                'db_table': 'UserForm',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('Jurisdiction', models.CharField(blank=True, max_length=32, null=True, verbose_name='权限字段')),
                ('role', models.IntegerField(choices=[(0, '访问者'), (1, '录入员'), (2, '复核员'), (3, '发布管理员'), (4, '应用录入员'), (5, '应用管理员')], default=0, verbose_name='角色信息')),
                ('ins', models.CharField(default='', help_text='所属机构', max_length=32, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='jointest',
            name='netinfo',
            field=models.ForeignKey(help_text='网络信息配置', on_delete=django.db.models.deletion.CASCADE, to='EcdsApp.NetInfo'),
        ),
        migrations.AddField(
            model_name='contactsinfo',
            name='contactuser',
            field=models.ForeignKey(help_text='运维联系人信息', on_delete=django.db.models.deletion.CASCADE, to='EcdsApp.NetInfo'),
        ),
        migrations.AddField(
            model_name='contactsinfo',
            name='ins',
            field=models.ForeignKey(help_text='所属机构表', on_delete=django.db.models.deletion.CASCADE, to='EcdsApp.Insinfo'),
        ),
        migrations.AddField(
            model_name='commentuser',
            name='ins',
            field=models.ForeignKey(help_text='关联机构表', on_delete=django.db.models.deletion.CASCADE, to='EcdsApp.Insinfo'),
        ),
        migrations.AddField(
            model_name='applyinfo',
            name='ins',
            field=models.ForeignKey(help_text='所属机构表', on_delete=django.db.models.deletion.CASCADE, to='EcdsApp.Insinfo'),
        ),
    ]
